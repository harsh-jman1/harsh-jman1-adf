{
	"name": "DF_Merge_Views",
	"properties": {
		"folder": {
			"name": "Full Stack Dataflows"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_SQL",
						"type": "DatasetReference"
					},
					"name": "OrderInput"
				},
				{
					"dataset": {
						"referenceName": "DS_SQL",
						"type": "DatasetReference"
					},
					"name": "UserInput"
				},
				{
					"dataset": {
						"referenceName": "DS_SQL",
						"type": "DatasetReference"
					},
					"name": "UserRoleInput"
				},
				{
					"dataset": {
						"referenceName": "DS_SQL",
						"type": "DatasetReference"
					},
					"name": "EventInput"
				},
				{
					"dataset": {
						"referenceName": "DS_SQL",
						"type": "DatasetReference"
					},
					"name": "CategoryInput"
				},
				{
					"dataset": {
						"referenceName": "DS_SQL",
						"type": "DatasetReference"
					},
					"name": "RoleInput"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "JoinOrderAndUser"
				},
				{
					"name": "JoinEvent"
				},
				{
					"name": "JoinCategory"
				},
				{
					"name": "JoinRoleName"
				},
				{
					"name": "SelectRequiredColumns"
				},
				{
					"name": "JoinRolesWithMain"
				},
				{
					"name": "RemapColumns"
				}
			],
			"scriptLines": [
				"source(output(",
				"          id as string,",
				"          createdAt as timestamp,",
				"          stripeId as string,",
				"          totalAmount as string,",
				"          eventId as string,",
				"          buyerId as string,",
				"          quantity as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> OrderInput",
				"source(output(",
				"          id as string,",
				"          email as string,",
				"          firstName as string,",
				"          lastName as string,",
				"          photo as string,",
				"          createdAt as timestamp,",
				"          updatedAt as timestamp,",
				"          password as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> UserInput",
				"source(output(",
				"          userId as string,",
				"          roleId as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> UserRoleInput",
				"source(output(",
				"          id as string,",
				"          title as string,",
				"          description as string,",
				"          location as string,",
				"          createdAt as timestamp,",
				"          imageUrl as string,",
				"          startDateTime as timestamp,",
				"          endDateTime as timestamp,",
				"          price as string,",
				"          isFree as boolean,",
				"          url as string,",
				"          categoryId as string,",
				"          organizerId as string,",
				"          isHidden as boolean",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> EventInput",
				"source(output(",
				"          id as string,",
				"          name as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> CategoryInput",
				"source(output(",
				"          id as integer,",
				"          name as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> RoleInput",
				"OrderInput, UserInput join(buyerId == UserInput@id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinOrderAndUser",
				"JoinOrderAndUser, EventInput join(eventId == EventInput@id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinEvent",
				"JoinEvent, CategoryInput join(categoryId == CategoryInput@id,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinCategory",
				"UserRoleInput, RoleInput join(roleId == id,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinRoleName",
				"JoinRoleName select(mapColumn(",
				"          userId,",
				"          Role = name",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectRequiredColumns",
				"JoinCategory, SelectRequiredColumns join(ERROR_FUNCTION('') == ERROR_FUNCTION(''),",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinRolesWithMain",
				"JoinRolesWithMain select(mapColumn(",
				"          order_id = OrderInput@id,",
				"          createdAt = OrderInput@createdAt,",
				"          stripeId,",
				"          totalAmount,",
				"          quantity,",
				"          user_id = UserInput@id,",
				"          email,",
				"          firstName,",
				"          lastName,",
				"          photo,",
				"          createdAt = UserInput@createdAt,",
				"          updatedAt,",
				"          password,",
				"          id = EventInput@id,",
				"          title,",
				"          description,",
				"          location,",
				"          createdAt = EventInput@createdAt,",
				"          imageUrl,",
				"          startDateTime,",
				"          endDateTime,",
				"          price,",
				"          isFree,",
				"          url,",
				"          categoryId,",
				"          organizerId,",
				"          isHidden,",
				"          id = CategoryInput@id,",
				"          category = name,",
				"          userId,",
				"          category = Role",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RemapColumns"
			]
		}
	}
}