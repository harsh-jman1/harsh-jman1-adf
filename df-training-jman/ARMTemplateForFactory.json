{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "df-training-jman"
		},
		"AzureSqlDatabase1_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'AzureSqlDatabase1'"
		},
		"LS_InvoiceBlob_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_InvoiceBlob'"
		},
		"LS_Postgres_Local_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of 'LS_Postgres_Local'"
		},
		"AzureSqlDatabase1_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "db-server-jman.database.windows.net"
		},
		"AzureSqlDatabase1_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "miniproject"
		},
		"AzureSqlDatabase1_properties_typeProperties_userName": {
			"type": "string",
			"defaultValue": "harshadmin"
		},
		"LS_Postgres_Local_properties_typeProperties_server": {
			"type": "string",
			"defaultValue": "localhost"
		},
		"LS_Postgres_Local_properties_typeProperties_database": {
			"type": "string",
			"defaultValue": "fsmini"
		},
		"LS_Postgres_Local_properties_typeProperties_username": {
			"type": "string",
			"defaultValue": "postgres"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/PL_Local_To_SQL')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "fetch the database from the local postgres server to azure sql server",
				"activities": [
					{
						"name": "LocalToSQL",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.cw_items",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "CopyLocalToSQL",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [
										{
											"name": "Source",
											"value": "public.@{item().source.table}"
										},
										{
											"name": "Destination",
											"value": "raw.@{item().destination.table}"
										}
									],
									"typeProperties": {
										"source": {
											"type": "PostgreSqlV2Source"
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"validateDataConsistency": false,
										"translator": {
											"value": "@item().copyActivity.translator",
											"type": "Expression"
										}
									},
									"inputs": [
										{
											"referenceName": "DS_Postgres_Local_Input",
											"type": "DatasetReference",
											"parameters": {
												"cw_table": "@item().source.table"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_SQL",
											"type": "DatasetReference",
											"parameters": {
												"tableName": {
													"value": "@item().source.table",
													"type": "Expression"
												},
												"tableSchema": {
													"value": "@item().destination.table",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"cw_items": {
						"type": "Array",
						"defaultValue": [
							{
								"source": {
									"table": "Category"
								},
								"destination": {
									"table": "Category"
								},
								"copyActivity": {
									"translator": {
										"type": "TabularTranslator",
										"mappings": [
											{
												"source": {
													"name": "id",
													"type": "String",
													"physicalType": "text"
												},
												"sink": {
													"name": "id",
													"type": "String",
													"physicalType": "nvarchar"
												}
											},
											{
												"source": {
													"name": "name",
													"type": "String",
													"physicalType": "text"
												},
												"sink": {
													"name": "name",
													"type": "String",
													"physicalType": "nvarchar"
												}
											}
										],
										"typeConversion": true,
										"typeConversionSettings": {
											"allowDataTruncation": true,
											"treatBooleanAsNumber": false
										}
									}
								}
							},
							{
								"source": {
									"table": "Event"
								},
								"destination": {
									"table": "Event"
								},
								"copyActivity": {
									"translator": {
										"type": "TabularTranslator",
										"mappings": [
											{
												"source": {
													"name": "id",
													"type": "String",
													"physicalType": "text"
												},
												"sink": {
													"name": "id",
													"type": "String",
													"physicalType": "nvarchar"
												}
											},
											{
												"source": {
													"name": "title",
													"type": "String",
													"physicalType": "text"
												},
												"sink": {
													"name": "title",
													"type": "String",
													"physicalType": "nvarchar"
												}
											},
											{
												"source": {
													"name": "description",
													"type": "String",
													"physicalType": "text"
												},
												"sink": {
													"name": "description",
													"type": "String",
													"physicalType": "nvarchar"
												}
											},
											{
												"source": {
													"name": "location",
													"type": "String",
													"physicalType": "text"
												},
												"sink": {
													"name": "location",
													"type": "String",
													"physicalType": "nvarchar"
												}
											},
											{
												"source": {
													"name": "createdAt",
													"type": "DateTime",
													"physicalType": "timestamp without time zone"
												},
												"sink": {
													"name": "createdAt",
													"type": "DateTime",
													"physicalType": "datetime2"
												}
											},
											{
												"source": {
													"name": "imageUrl",
													"type": "String",
													"physicalType": "text"
												},
												"sink": {
													"name": "imageUrl",
													"type": "String",
													"physicalType": "nvarchar"
												}
											},
											{
												"source": {
													"name": "startDateTime",
													"type": "DateTime",
													"physicalType": "timestamp without time zone"
												},
												"sink": {
													"name": "startDateTime",
													"type": "DateTime",
													"physicalType": "datetime2"
												}
											},
											{
												"source": {
													"name": "endDateTime",
													"type": "DateTime",
													"physicalType": "timestamp without time zone"
												},
												"sink": {
													"name": "endDateTime",
													"type": "DateTime",
													"physicalType": "datetime2"
												}
											},
											{
												"source": {
													"name": "price",
													"type": "String",
													"physicalType": "text"
												},
												"sink": {
													"name": "price",
													"type": "String",
													"physicalType": "nvarchar"
												}
											},
											{
												"source": {
													"name": "isFree",
													"type": "Boolean",
													"physicalType": "boolean"
												},
												"sink": {
													"name": "isFree",
													"type": "Boolean",
													"physicalType": "bit"
												}
											},
											{
												"source": {
													"name": "url",
													"type": "String",
													"physicalType": "text"
												},
												"sink": {
													"name": "url",
													"type": "String",
													"physicalType": "nvarchar"
												}
											},
											{
												"source": {
													"name": "categoryId",
													"type": "String",
													"physicalType": "text"
												},
												"sink": {
													"name": "categoryId",
													"type": "String",
													"physicalType": "nvarchar"
												}
											},
											{
												"source": {
													"name": "organizerId",
													"type": "String",
													"physicalType": "text"
												},
												"sink": {
													"name": "organizerId",
													"type": "String",
													"physicalType": "nvarchar"
												}
											},
											{
												"source": {
													"name": "isHidden",
													"type": "Boolean",
													"physicalType": "boolean"
												},
												"sink": {
													"name": "isHidden",
													"type": "Boolean",
													"physicalType": "bit"
												}
											}
										],
										"typeConversion": true,
										"typeConversionSettings": {
											"allowDataTruncation": true,
											"treatBooleanAsNumber": false
										}
									}
								}
							},
							{
								"source": {
									"table": "Order"
								},
								"destination": {
									"table": "Order"
								},
								"copyActivity": {
									"translator": {
										"type": "TabularTranslator",
										"mappings": [
											{
												"source": {
													"name": "id",
													"type": "String",
													"physicalType": "text"
												},
												"sink": {
													"name": "id",
													"type": "String",
													"physicalType": "nvarchar"
												}
											},
											{
												"source": {
													"name": "createdAt",
													"type": "DateTime",
													"physicalType": "timestamp without time zone"
												},
												"sink": {
													"name": "createdAt",
													"type": "DateTime",
													"physicalType": "datetime2"
												}
											},
											{
												"source": {
													"name": "stripeId",
													"type": "String",
													"physicalType": "text"
												},
												"sink": {
													"name": "stripeId",
													"type": "String",
													"physicalType": "nvarchar"
												}
											},
											{
												"source": {
													"name": "totalAmount",
													"type": "String",
													"physicalType": "text"
												},
												"sink": {
													"name": "totalAmount",
													"type": "String",
													"physicalType": "nvarchar"
												}
											},
											{
												"source": {
													"name": "eventId",
													"type": "String",
													"physicalType": "text"
												},
												"sink": {
													"name": "eventId",
													"type": "String",
													"physicalType": "nvarchar"
												}
											},
											{
												"source": {
													"name": "buyerId",
													"type": "String",
													"physicalType": "text"
												},
												"sink": {
													"name": "buyerId",
													"type": "String",
													"physicalType": "nvarchar"
												}
											},
											{
												"source": {
													"name": "quantity",
													"type": "Int32",
													"physicalType": "integer"
												},
												"sink": {
													"name": "quantity",
													"type": "Int32",
													"physicalType": "int"
												}
											}
										],
										"typeConversion": true,
										"typeConversionSettings": {
											"allowDataTruncation": true,
											"treatBooleanAsNumber": false
										}
									}
								}
							},
							{
								"source": {
									"table": "RefreshToken"
								},
								"destination": {
									"table": "RefreshToken"
								},
								"copyActivity": {
									"translator": {
										"type": "TabularTranslator",
										"mappings": [
											{
												"source": {
													"name": "id",
													"type": "String",
													"physicalType": "text"
												},
												"sink": {
													"name": "id",
													"type": "String",
													"physicalType": "nvarchar"
												}
											},
											{
												"source": {
													"name": "hashedToken",
													"type": "String",
													"physicalType": "text"
												},
												"sink": {
													"name": "hashedToken",
													"type": "String",
													"physicalType": "nvarchar"
												}
											},
											{
												"source": {
													"name": "userId",
													"type": "String",
													"physicalType": "text"
												},
												"sink": {
													"name": "userId",
													"type": "String",
													"physicalType": "nvarchar"
												}
											},
											{
												"source": {
													"name": "revoked",
													"type": "Boolean",
													"physicalType": "boolean"
												},
												"sink": {
													"name": "revoked",
													"type": "Boolean",
													"physicalType": "bit"
												}
											},
											{
												"source": {
													"name": "createdAt",
													"type": "DateTime",
													"physicalType": "timestamp without time zone"
												},
												"sink": {
													"name": "createdAt",
													"type": "DateTime",
													"physicalType": "datetime2"
												}
											},
											{
												"source": {
													"name": "updatedAt",
													"type": "DateTime",
													"physicalType": "timestamp without time zone"
												},
												"sink": {
													"name": "updatedAt",
													"type": "DateTime",
													"physicalType": "datetime2"
												}
											}
										],
										"typeConversion": true,
										"typeConversionSettings": {
											"allowDataTruncation": true,
											"treatBooleanAsNumber": false
										}
									}
								}
							},
							{
								"source": {
									"table": "Role"
								},
								"destination": {
									"table": "Role"
								},
								"copyActivity": {
									"translator": {
										"type": "TabularTranslator",
										"mappings": [
											{
												"source": {
													"name": "id",
													"type": "Int32",
													"physicalType": "integer"
												},
												"sink": {
													"name": "id",
													"type": "Int32",
													"physicalType": "int"
												}
											},
											{
												"source": {
													"name": "name",
													"type": "String",
													"physicalType": "text"
												},
												"sink": {
													"name": "name",
													"type": "String",
													"physicalType": "nvarchar"
												}
											}
										],
										"typeConversion": true,
										"typeConversionSettings": {
											"allowDataTruncation": true,
											"treatBooleanAsNumber": false
										}
									}
								}
							},
							{
								"source": {
									"table": "User"
								},
								"destination": {
									"table": "User"
								},
								"copyActivity": {
									"translator": {
										"type": "TabularTranslator",
										"mappings": [
											{
												"source": {
													"name": "id",
													"type": "String",
													"physicalType": "text"
												},
												"sink": {
													"name": "id",
													"type": "String",
													"physicalType": "nvarchar"
												}
											},
											{
												"source": {
													"name": "email",
													"type": "String",
													"physicalType": "text"
												},
												"sink": {
													"name": "email",
													"type": "String",
													"physicalType": "nvarchar"
												}
											},
											{
												"source": {
													"name": "firstName",
													"type": "String",
													"physicalType": "text"
												},
												"sink": {
													"name": "firstName",
													"type": "String",
													"physicalType": "nvarchar"
												}
											},
											{
												"source": {
													"name": "lastName",
													"type": "String",
													"physicalType": "text"
												},
												"sink": {
													"name": "lastName",
													"type": "String",
													"physicalType": "nvarchar"
												}
											},
											{
												"source": {
													"name": "photo",
													"type": "String",
													"physicalType": "text"
												},
												"sink": {
													"name": "photo",
													"type": "String",
													"physicalType": "nvarchar"
												}
											},
											{
												"source": {
													"name": "createdAt",
													"type": "DateTime",
													"physicalType": "timestamp without time zone"
												},
												"sink": {
													"name": "createdAt",
													"type": "DateTime",
													"physicalType": "datetime2"
												}
											},
											{
												"source": {
													"name": "updatedAt",
													"type": "DateTime",
													"physicalType": "timestamp without time zone"
												},
												"sink": {
													"name": "updatedAt",
													"type": "DateTime",
													"physicalType": "datetime2"
												}
											},
											{
												"source": {
													"name": "password",
													"type": "String",
													"physicalType": "text"
												},
												"sink": {
													"name": "password",
													"type": "String",
													"physicalType": "nvarchar"
												}
											}
										],
										"typeConversion": true,
										"typeConversionSettings": {
											"allowDataTruncation": true,
											"treatBooleanAsNumber": false
										}
									}
								}
							},
							{
								"source": {
									"table": "UserRoles"
								},
								"destination": {
									"table": "UserRoles"
								},
								"copyActivity": {
									"translator": {
										"type": "TabularTranslator",
										"mappings": [
											{
												"source": {
													"name": "userId",
													"type": "String",
													"physicalType": "text"
												},
												"sink": {
													"name": "userId",
													"type": "String",
													"physicalType": "nvarchar"
												}
											},
											{
												"source": {
													"name": "roleId",
													"type": "Int32",
													"physicalType": "integer"
												},
												"sink": {
													"name": "roleId",
													"type": "Int32",
													"physicalType": "int"
												}
											}
										],
										"typeConversion": true,
										"typeConversionSettings": {
											"allowDataTruncation": true,
											"treatBooleanAsNumber": false
										}
									}
								}
							}
						]
					}
				},
				"folder": {
					"name": "Full Stack"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Postgres_Local_Input')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Import_and_Generate_Reports')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy From Blob",
						"type": "Copy",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "ExcelSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "*.xlsx",
									"enablePartitionDiscovery": false
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false,
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "departmentCode",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "departmentCode",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "categoryCode",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "categoryCode",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "categoryName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "categoryName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "searchCategoryCode",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "searchCategoryCode",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "seriesCode",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "seriesCode",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "seriesName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "seriesName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "brandCode",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "brandCode",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "brandUrlCode",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "brandUrlCode",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "brandName",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "brandName",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "productImageList",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "productImageList",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "catchCopy",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "catchCopy",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "minPiecesPerPackage",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "minPiecesPerPackage",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "maxPiecesPerPackage",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "maxPiecesPerPackage",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "minStandardDaysToShip",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "minStandardDaysToShip",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "maxStandardDaysToShip",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "maxStandardDaysToShip",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "minStandardUnitPrice",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "minStandardUnitPrice",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "maxStandardUnitPrice",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "maxStandardUnitPrice",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "minPricePerPiece",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "minPricePerPiece",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "maxPricePerPiece",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "maxPricePerPiece",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "recommendFlag",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "recommendFlag",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "volumeDiscountFlag",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "volumeDiscountFlag",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "discontinuedProductFlag",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "discontinuedProductFlag",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "stock",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "stock",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "pageView",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "pageView",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "comparisonSpecValueList",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "comparisonSpecValueList",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "shaftPatternSpecValueList",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "shaftPatternSpecValueList",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"name": "categoryList",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "categoryList",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_Blob_Input_Excel",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_SQL",
								"type": "DatasetReference",
								"parameters": {
									"tableName": "product_details",
									"tableSchema": "raw"
								}
							}
						]
					},
					{
						"name": "Clean Data",
						"type": "ExecuteDataFlow",
						"state": "Inactive",
						"onInactiveMarkAs": "Succeeded",
						"dependsOn": [
							{
								"activity": "Copy From Blob",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Clean_Raw_Data",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"TableInput": {
										"tableName": "product_details",
										"tableSchema": "raw"
									},
									"TableSink": {
										"tableName": "product_details",
										"tableSchema": "prep"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "DF_Generate_Reports",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Clean Data",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Generate_Reports",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"ViewRankInput": {
										"tableName": "product_details",
										"tableSchema": "prep"
									},
									"AveragePriceInput": {
										"tableName": "product_details",
										"tableSchema": "prep"
									},
									"AverageDeliveryInput": {
										"tableName": "product_details",
										"tableSchema": "prep"
									},
									"MostViewedSink": {
										"tableName": "most_viewed_products",
										"tableSchema": "report"
									},
									"AveragePriceSink": {
										"tableName": "average_price",
										"tableSchema": "report"
									},
									"AverageDeliverySink": {
										"tableName": "average_delivery",
										"tableSchema": "report"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Misumi"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_Blob_Input_Excel')]",
				"[concat(variables('factoryId'), '/datasets/DS_SQL')]",
				"[concat(variables('factoryId'), '/dataflows/DF_Clean_Raw_Data')]",
				"[concat(variables('factoryId'), '/dataflows/DF_Generate_Reports')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Raw_To_Prep')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Fetch Table Names",
						"type": "Script",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"linkedServiceName": {
							"referenceName": "AzureSqlDatabase1",
							"type": "LinkedServiceReference"
						},
						"typeProperties": {
							"scripts": [
								{
									"type": "Query",
									"text": "SELECT t.name \n  FROM sys.tables AS t\n  INNER JOIN sys.schemas AS s\n  ON t.[schema_id] = s.[schema_id]\n  WHERE s.name = N'raw';"
								}
							],
							"scriptBlockExecutionTimeout": "02:00:00"
						}
					},
					{
						"name": "Prep Each Raw Table",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Fetch Table Names",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Fetch Table Names').output.resultSets[0].rows",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "DF_Prep_Raw_Data",
									"type": "ExecuteDataFlow",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataflow": {
											"referenceName": "DF_Prepare_Data_From_Raw",
											"type": "DataFlowReference",
											"parameters": {},
											"datasetParameters": {
												"TableInput": {
													"tableName": {
														"value": "@item().name",
														"type": "Expression"
													},
													"tableSchema": "raw"
												},
												"TableOutput": {
													"tableName": {
														"value": "@item().name",
														"type": "Expression"
													},
													"tableSchema": "prep"
												}
											}
										},
										"staging": {},
										"compute": {
											"coreCount": 8,
											"computeType": "General"
										},
										"traceLevel": "Fine"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Full Stack"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]",
				"[concat(variables('factoryId'), '/dataflows/DF_Prepare_Data_From_Raw')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Postgres_Local_Input')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Postgres_Local",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"cw_table": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "PostgreSqlV2Table",
				"schema": [],
				"typeProperties": {
					"schema": "public",
					"table": {
						"value": "@dataset().cw_table",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_Postgres_Local')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SQL')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"tableName": {
						"type": "string"
					},
					"tableSchema": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().tableSchema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().tableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/AzureSqlDatabase1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"server": "[parameters('AzureSqlDatabase1_properties_typeProperties_server')]",
					"database": "[parameters('AzureSqlDatabase1_properties_typeProperties_database')]",
					"encrypt": "mandatory",
					"trustServerCertificate": false,
					"authenticationType": "SQL",
					"userName": "[parameters('AzureSqlDatabase1_properties_typeProperties_userName')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('AzureSqlDatabase1_password')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_InvoiceBlob')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('LS_InvoiceBlob_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_Postgres_Local')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "PostgreSqlV2",
				"typeProperties": {
					"server": "[parameters('LS_Postgres_Local_properties_typeProperties_server')]",
					"port": 5432,
					"database": "[parameters('LS_Postgres_Local_properties_typeProperties_database')]",
					"username": "[parameters('LS_Postgres_Local_properties_typeProperties_username')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('LS_Postgres_Local_password')]"
					},
					"sslMode": 2,
					"authenticationType": "Basic"
				},
				"connectVia": {
					"referenceName": "IR-Self",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/IR-Self')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/IR-Self')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Prepare_Data_From_Raw')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Full Stack Dataflows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_SQL",
								"type": "DatasetReference"
							},
							"name": "TableInput"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_SQL",
								"type": "DatasetReference"
							},
							"name": "TableOutput"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> TableInput",
						"TableInput sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> TableOutput"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_SQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_Blob_Input_Excel')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_InvoiceBlob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Excel",
				"typeProperties": {
					"sheetName": "products_details",
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "misumi"
					},
					"firstRowAsHeader": true
				},
				"schema": [
					{
						"name": "departmentCode",
						"type": "String"
					},
					{
						"name": "categoryCode",
						"type": "String"
					},
					{
						"name": "categoryName",
						"type": "String"
					},
					{
						"name": "searchCategoryCode",
						"type": "String"
					},
					{
						"name": "seriesCode",
						"type": "String"
					},
					{
						"name": "seriesName",
						"type": "String"
					},
					{
						"name": "brandCode",
						"type": "String"
					},
					{
						"name": "brandUrlCode",
						"type": "String"
					},
					{
						"name": "brandName",
						"type": "String"
					},
					{
						"name": "productImageList",
						"type": "String"
					},
					{
						"name": "catchCopy",
						"type": "String"
					},
					{
						"name": "minPiecesPerPackage",
						"type": "String"
					},
					{
						"name": "maxPiecesPerPackage",
						"type": "String"
					},
					{
						"name": "minStandardDaysToShip",
						"type": "String"
					},
					{
						"name": "maxStandardDaysToShip",
						"type": "String"
					},
					{
						"name": "minStandardUnitPrice",
						"type": "String"
					},
					{
						"name": "maxStandardUnitPrice",
						"type": "String"
					},
					{
						"name": "minPricePerPiece",
						"type": "String"
					},
					{
						"name": "maxPricePerPiece",
						"type": "String"
					},
					{
						"name": "recommendFlag",
						"type": "String"
					},
					{
						"name": "volumeDiscountFlag",
						"type": "String"
					},
					{
						"name": "discontinuedProductFlag",
						"type": "String"
					},
					{
						"name": "stock",
						"type": "String"
					},
					{
						"name": "pageView",
						"type": "String"
					},
					{
						"name": "comparisonSpecValueList",
						"type": "String"
					},
					{
						"name": "shaftPatternSpecValueList",
						"type": "String"
					},
					{
						"name": "categoryList",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_InvoiceBlob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Clean_Raw_Data')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Misumi"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_SQL",
								"type": "DatasetReference"
							},
							"name": "TableInput"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_SQL",
								"type": "DatasetReference"
							},
							"name": "TableSink"
						}
					],
					"transformations": [
						{
							"name": "HashColumns"
						},
						{
							"name": "RemoveHashColumn"
						},
						{
							"name": "IDColumnConstant"
						},
						{
							"name": "UpdateRowID"
						},
						{
							"name": "RemoveConstant"
						}
					],
					"scriptLines": [
						"source(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     limit: 100,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> TableInput",
						"TableInput aggregate(groupBy(columns = sha2(256, columns())),",
						"     each(match(true()), $$ = first($$))) ~> HashColumns",
						"HashColumns select(mapColumn(",
						"          each(match(name!='columns'))",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RemoveHashColumn",
						"RemoveHashColumn derive(IDConstant = 1) ~> IDColumnConstant",
						"IDColumnConstant window(asc(IDConstant, true),",
						"     ID = rowNumber()) ~> UpdateRowID",
						"UpdateRowID select(mapColumn(",
						"          each(match(name!='IDConstant'))",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RemoveConstant",
						"RemoveConstant sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> TableSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_SQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Generate_Reports')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Misumi"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_SQL",
								"type": "DatasetReference"
							},
							"name": "ViewRankInput"
						},
						{
							"dataset": {
								"referenceName": "DS_SQL",
								"type": "DatasetReference"
							},
							"name": "AveragePriceInput"
						},
						{
							"dataset": {
								"referenceName": "DS_SQL",
								"type": "DatasetReference"
							},
							"name": "AverageDeliveryInput"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_SQL",
								"type": "DatasetReference"
							},
							"name": "MostViewedSink"
						},
						{
							"dataset": {
								"referenceName": "DS_SQL",
								"type": "DatasetReference"
							},
							"name": "AveragePriceSink"
						},
						{
							"dataset": {
								"referenceName": "DS_SQL",
								"type": "DatasetReference"
							},
							"name": "AverageDeliverySink"
						}
					],
					"transformations": [
						{
							"name": "SortByPageView"
						},
						{
							"name": "SelectColumns"
						},
						{
							"name": "AveragePrice"
						},
						{
							"name": "RemoveProductsWithNoPrice"
						},
						{
							"name": "AverageDeliveryDate"
						},
						{
							"name": "RemoveProductsWithNoDelivery"
						},
						{
							"name": "SelectRequiredColumns"
						},
						{
							"name": "SelectRequiredRows"
						}
					],
					"scriptLines": [
						"source(output(",
						"          departmentCode as string,",
						"          categoryCode as string,",
						"          categoryName as string,",
						"          searchCategoryCode as string,",
						"          seriesCode as string,",
						"          seriesName as string,",
						"          brandCode as string,",
						"          brandUrlCode as string,",
						"          brandName as string,",
						"          productImageList as string,",
						"          catchCopy as string,",
						"          minPiecesPerPackage as string,",
						"          maxPiecesPerPackage as string,",
						"          minStandardDaysToShip as string,",
						"          maxStandardDaysToShip as string,",
						"          minStandardUnitPrice as string,",
						"          maxStandardUnitPrice as string,",
						"          minPricePerPiece as string,",
						"          maxPricePerPiece as string,",
						"          recommendFlag as string,",
						"          volumeDiscountFlag as string,",
						"          discontinuedProductFlag as string,",
						"          stock as string,",
						"          pageView as integer,",
						"          comparisonSpecValueList as string,",
						"          shaftPatternSpecValueList as string,",
						"          categoryList as string,",
						"          ID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> ViewRankInput",
						"source(output(",
						"          departmentCode as string,",
						"          categoryCode as string,",
						"          categoryName as string,",
						"          searchCategoryCode as string,",
						"          seriesCode as string,",
						"          seriesName as string,",
						"          brandCode as string,",
						"          brandUrlCode as string,",
						"          brandName as string,",
						"          productImageList as string,",
						"          catchCopy as string,",
						"          minPiecesPerPackage as string,",
						"          maxPiecesPerPackage as string,",
						"          minStandardDaysToShip as string,",
						"          maxStandardDaysToShip as string,",
						"          minStandardUnitPrice as string,",
						"          maxStandardUnitPrice as string,",
						"          minPricePerPiece as string,",
						"          maxPricePerPiece as string,",
						"          recommendFlag as string,",
						"          volumeDiscountFlag as string,",
						"          discontinuedProductFlag as string,",
						"          stock as string,",
						"          pageView as string,",
						"          comparisonSpecValueList as string,",
						"          shaftPatternSpecValueList as string,",
						"          categoryList as string,",
						"          ID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> AveragePriceInput",
						"source(output(",
						"          departmentCode as string,",
						"          categoryCode as string,",
						"          categoryName as string,",
						"          searchCategoryCode as string,",
						"          seriesCode as string,",
						"          seriesName as string,",
						"          brandCode as string,",
						"          brandUrlCode as string,",
						"          brandName as string,",
						"          productImageList as string,",
						"          catchCopy as string,",
						"          minPiecesPerPackage as string,",
						"          maxPiecesPerPackage as string,",
						"          minStandardDaysToShip as integer,",
						"          maxStandardDaysToShip as integer,",
						"          minStandardUnitPrice as string,",
						"          maxStandardUnitPrice as string,",
						"          minPricePerPiece as string,",
						"          maxPricePerPiece as string,",
						"          recommendFlag as string,",
						"          volumeDiscountFlag as string,",
						"          discontinuedProductFlag as string,",
						"          stock as string,",
						"          pageView as string,",
						"          comparisonSpecValueList as string,",
						"          shaftPatternSpecValueList as string,",
						"          categoryList as string,",
						"          ID as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> AverageDeliveryInput",
						"ViewRankInput sort(desc(pageView, false),",
						"     caseInsensitive: true) ~> SortByPageView",
						"SortByPageView select(mapColumn(",
						"          ID,",
						"          categoryName,",
						"          seriesName,",
						"          brandName,",
						"          minPricePerPiece,",
						"          maxPricePerPiece,",
						"          volumeDiscountFlag,",
						"          discontinuedProductFlag,",
						"          stock,",
						"          pageView,",
						"          categoryList",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectColumns",
						"AveragePriceInput derive(AveragePrice = (toFloat(minPricePerPiece) +  toFloat(maxPricePerPiece) ) / 2.0) ~> AveragePrice",
						"AveragePrice alterRow(deleteIf(isNull(AveragePrice))) ~> RemoveProductsWithNoPrice",
						"AverageDeliveryInput derive(AverageDeliveryDate = (toFloat(minStandardDaysToShip) +  toFloat(maxStandardDaysToShip) ) / 2.0) ~> AverageDeliveryDate",
						"AverageDeliveryDate alterRow(deleteIf(isNull(AverageDeliveryDate))) ~> RemoveProductsWithNoDelivery",
						"RemoveProductsWithNoPrice select(mapColumn(",
						"          ID,",
						"          categoryName,",
						"          seriesName,",
						"          brandName,",
						"          minPricePerPiece,",
						"          maxPricePerPiece,",
						"          volumeDiscountFlag,",
						"          discontinuedProductFlag,",
						"          stock,",
						"          pageView,",
						"          categoryList,",
						"          AveragePrice",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectRequiredColumns",
						"RemoveProductsWithNoDelivery select(mapColumn(",
						"          ID,",
						"          categoryName,",
						"          seriesName,",
						"          brandName,",
						"          minStandardDaysToShip,",
						"          maxStandardDaysToShip,",
						"          recommendFlag,",
						"          volumeDiscountFlag,",
						"          discontinuedProductFlag,",
						"          stock,",
						"          pageView,",
						"          categoryList,",
						"          AverageDeliveryDate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectRequiredRows",
						"SelectColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> MostViewedSink",
						"SelectRequiredColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> AveragePriceSink",
						"SelectRequiredRows sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> AverageDeliverySink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_SQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Generate_Combined_View')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DF_Merge_Views",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Merge_Views",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"OrderInput": {
										"tableName": "Order",
										"tableSchema": "prep"
									},
									"UserInput": {
										"tableName": "User",
										"tableSchema": "prep"
									},
									"UserRoleInput": {
										"tableName": "UserRoles",
										"tableSchema": "prep"
									},
									"EventInput": {
										"tableName": "Event",
										"tableSchema": "prep"
									},
									"CategoryInput": {
										"tableName": "Category",
										"tableSchema": "prep"
									},
									"RoleInput": {
										"tableName": "Role",
										"tableSchema": "prep"
									},
									"MergeViewSink": {
										"tableName": "merge_view",
										"tableSchema": "report"
									}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Full Stack"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_Merge_Views')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Merge_Views')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "Full Stack Dataflows"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_SQL",
								"type": "DatasetReference"
							},
							"name": "OrderInput"
						},
						{
							"dataset": {
								"referenceName": "DS_SQL",
								"type": "DatasetReference"
							},
							"name": "UserInput"
						},
						{
							"dataset": {
								"referenceName": "DS_SQL",
								"type": "DatasetReference"
							},
							"name": "UserRoleInput"
						},
						{
							"dataset": {
								"referenceName": "DS_SQL",
								"type": "DatasetReference"
							},
							"name": "EventInput"
						},
						{
							"dataset": {
								"referenceName": "DS_SQL",
								"type": "DatasetReference"
							},
							"name": "CategoryInput"
						},
						{
							"dataset": {
								"referenceName": "DS_SQL",
								"type": "DatasetReference"
							},
							"name": "RoleInput"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_SQL",
								"type": "DatasetReference"
							},
							"name": "MergeViewSink"
						}
					],
					"transformations": [
						{
							"name": "JoinOrderAndUser"
						},
						{
							"name": "JoinEvent"
						},
						{
							"name": "JoinCategory"
						},
						{
							"name": "JoinRoleName"
						},
						{
							"name": "SelectRequiredColumns"
						},
						{
							"name": "JoinRolesWithMain"
						},
						{
							"name": "RemapColumns"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as string,",
						"          createdAt as timestamp,",
						"          stripeId as string,",
						"          totalAmount as string,",
						"          eventId as string,",
						"          buyerId as string,",
						"          quantity as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> OrderInput",
						"source(output(",
						"          id as string,",
						"          email as string,",
						"          firstName as string,",
						"          lastName as string,",
						"          photo as string,",
						"          createdAt as timestamp,",
						"          updatedAt as timestamp,",
						"          password as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> UserInput",
						"source(output(",
						"          userId as string,",
						"          roleId as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> UserRoleInput",
						"source(output(",
						"          id as string,",
						"          title as string,",
						"          description as string,",
						"          location as string,",
						"          createdAt as timestamp,",
						"          imageUrl as string,",
						"          startDateTime as timestamp,",
						"          endDateTime as timestamp,",
						"          price as string,",
						"          isFree as boolean,",
						"          url as string,",
						"          categoryId as string,",
						"          organizerId as string,",
						"          isHidden as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> EventInput",
						"source(output(",
						"          id as string,",
						"          name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> CategoryInput",
						"source(output(",
						"          id as integer,",
						"          name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> RoleInput",
						"OrderInput, UserInput join(buyerId == UserInput@id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinOrderAndUser",
						"JoinOrderAndUser, EventInput join(eventId == EventInput@id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinEvent",
						"JoinEvent, CategoryInput join(categoryId == CategoryInput@id,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinCategory",
						"UserRoleInput, RoleInput join(roleId == id,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinRoleName",
						"JoinRoleName select(mapColumn(",
						"          userId,",
						"          Role = name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectRequiredColumns",
						"JoinCategory, SelectRequiredColumns join(UserInput@id == userId,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinRolesWithMain",
						"JoinRolesWithMain select(mapColumn(",
						"          order_id = OrderInput@id,",
						"          created_at = OrderInput@createdAt,",
						"          stripe_id = stripeId,",
						"          total_amount = totalAmount,",
						"          quantity,",
						"          user_id = UserInput@id,",
						"          email,",
						"          first_name = firstName,",
						"          last_name = lastName,",
						"          photo,",
						"          event_id = EventInput@id,",
						"          event_title = title,",
						"          description,",
						"          location,",
						"          image_url = imageUrl,",
						"          start_date_time = startDateTime,",
						"          end_date_time = endDateTime,",
						"          price,",
						"          isFree,",
						"          url,",
						"          is_hidden = isHidden,",
						"          category = name,",
						"          category = Role",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RemapColumns",
						"RemapColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> MergeViewSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_SQL')]"
			]
		}
	]
}