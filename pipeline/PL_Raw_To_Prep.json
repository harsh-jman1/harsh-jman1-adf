{
	"name": "PL_Raw_To_Prep",
	"properties": {
		"activities": [
			{
				"name": "Fetch Table Names",
				"type": "Script",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"linkedServiceName": {
					"referenceName": "AzureSqlDatabase1",
					"type": "LinkedServiceReference"
				},
				"typeProperties": {
					"scripts": [
						{
							"type": "Query",
							"text": "SELECT t.name \n  FROM sys.tables AS t\n  INNER JOIN sys.schemas AS s\n  ON t.[schema_id] = s.[schema_id]\n  WHERE s.name = N'raw';"
						}
					],
					"scriptBlockExecutionTimeout": "02:00:00"
				}
			},
			{
				"name": "Prep Each Raw Table",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "Fetch Table Names",
						"dependencyConditions": [
							"Completed"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('Fetch Table Names').output.resultSets[0].rows",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "DF_Prep_Raw_Data",
							"type": "ExecuteDataFlow",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"dataflow": {
									"referenceName": "DF_Prepare_Data_From_Raw",
									"type": "DataFlowReference",
									"datasetParameters": {
										"TableInput": {
											"tableName": {
												"value": "@item().name",
												"type": "Expression"
											},
											"tableSchema": "raw"
										}
									}
								},
								"compute": {
									"coreCount": 8,
									"computeType": "General"
								},
								"traceLevel": "Fine"
							}
						}
					]
				}
			}
		],
		"folder": {
			"name": "Full Stack"
		},
		"annotations": []
	}
}